#Question 3

def GetMedian (nums1, nums2):
    if len(nums1) > len(nums2):
       nums1, nums2 = nums2, nums1 # swap the array

       #get the length of both arrays
       m = len(nums1)
       n = len(nums2)

        #to begin binary searching from index o and max length m
       left = 0
       right  = m

       # we search nums1 starting from index 0 to max length m
       while left < right:
           i = (left + right) // 2
           j = (m + n + +1)//2-i

           # Check partition conditions to ensure elment on left side are smaller than element on right
           if i < m and nums1[i] < nums2[j - 1]:
               left = i + 1
           elif i > 0 and nums1[i - 1] > nums2[j]:
               right = i - 1
           else:
               # Find max of left half and min of right half
               max_left = max(nums1[i - 1] if i > 0 else float('-inf'), nums2[j - 1] if j > 0 else float('-inf'))
               min_right = min(nums1[i] if i < m else float('inf'), nums2[j] if j < n else float('inf'))

               # Return median based on the combined length (odd/even)
               if (m + n) % 2 == 1:
                   return max_left
               return (max_left + min_right) / 2


#sample data
nums1 = [1, 2, 4]
nums2 = [2, 5]
print(GetMedian(nums1, nums2))
